"""
Main Game Window - Primary game interface
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, Canvas, Frame
from datetime import datetime
from typing import Optional

from ..core.game_state import GameStateManager
from ..core.character import Character
from ..core.dice_system import DiceSystem
from ..core.combat_system import CombatSystem
from ..entities.enemy import Enemy
from ..ai.game_master import AIGameMaster
from ..ai.narrative_manager import NarrativeManager
from ..ai.divine_narrator import NarrativePhase
from ..data.persistence import SaveManager
from .character_creation import CharacterCreationDialog


class GameMainWindow(tk.Tk):
    """Interfaz principal del juego"""
    
    def __init__(self):
        super().__init__()
        
        self.title("Habitaci√≥n del Tiempo RPG v0.2.0")
        self.geometry("1400x900")
        self.minsize(1200, 800)
        self.configure(bg='#1a1a1a')
        
        # Inicializar sistemas de juego
        self.game_state = GameStateManager()
        self.dice_system = DiceSystem()
        self.combat_system = CombatSystem(self.dice_system)
        
        # Inicializar IA con configuraci√≥n mejorada
        from ..config.game_config import GameConfig
        game_config = GameConfig()
        ai_config = game_config.get_ai_config()
        
        self.ai_gm = AIGameMaster(api_key=ai_config.get("openai_api_key"), config=ai_config)
        self.narrative_manager = NarrativeManager()
        self.save_manager = SaveManager()
        
        # Estado del proceso narrativo divino
        self.in_divine_questioning = False
        self.awaiting_world_creation = False
        
        # Suscribirse a eventos del juego
        self.game_state.subscribe(self.on_game_event)
        
        # Configurar estilo
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.setup_styles()
        
        # Crear interfaz
        self.create_widgets()
        self.create_menu()
        
        # Inicializar juego
        self.start_game()
    
    def setup_styles(self):
        """Configura los estilos de la interfaz"""
        # Configurar estilos de las barras de progreso
        self.style.configure('HP.Horizontal.TProgressbar', 
                           background='#8B0000',
                           troughcolor='#3a3a3a',
                           bordercolor='#2a2a2a',
                           lightcolor='#8B0000',
                           darkcolor='#8B0000')
        
        self.style.configure('Mana.Horizontal.TProgressbar',
                           background='#00008B',
                           troughcolor='#3a3a3a',
                           bordercolor='#2a2a2a',
                           lightcolor='#00008B',
                           darkcolor='#00008B')
        
        self.style.configure('EXP.Horizontal.TProgressbar',
                           background='#FFD700',
                           troughcolor='#3a3a3a',
                           bordercolor='#2a2a2a',
                           lightcolor='#FFD700',
                           darkcolor='#FFD700')
    
    def create_widgets(self):
        """Crea la interfaz principal"""
        # Frame principal con dos columnas
        main_frame = tk.Frame(self, bg='#1a1a1a')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Configurar grid weights
        main_frame.grid_columnconfigure(0, weight=3)
        main_frame.grid_columnconfigure(1, weight=1)
        main_frame.grid_rowconfigure(0, weight=1)
        
        # Crear columna izquierda (√°rea de juego)
        self.create_game_area(main_frame)
        
        # Crear columna derecha (panel de personaje)
        self.create_character_panel(main_frame)
    
    def create_game_area(self, parent):
        """Crea el √°rea principal de juego"""
        left_frame = tk.Frame(parent, bg='#1a1a1a')
        left_frame.grid(row=0, column=0, sticky='nsew', padx=(0, 5))
        
        # Configurar layout con √°rea de narraci√≥n e imagen
        content_frame = tk.Frame(left_frame, bg='#1a1a1a')
        content_frame.pack(fill=tk.BOTH, expand=True)
        
        # √Årea de narraci√≥n (lado izquierdo)
        narration_frame = tk.LabelFrame(content_frame, text="üìú Narraci√≥n", 
                                       bg='#1a1a1a', fg='white', font=('Arial', 12, 'bold'))
        narration_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        self.narration_text = scrolledtext.ScrolledText(narration_frame, 
                                                        wrap=tk.WORD, 
                                                        bg='black', 
                                                        fg='white',
                                                        font=('Arial', 11),
                                                        height=25)
        self.narration_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # √Årea de imagen (lado derecho)
        self.image_frame = tk.LabelFrame(content_frame, text="üñºÔ∏è Escenario", 
                                        bg='#1a1a1a', fg='white', font=('Arial', 12, 'bold'))
        self.image_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))
        
        # Canvas para mostrar imagen
        self.image_canvas = tk.Canvas(self.image_frame, width=400, height=300,
                                     bg='#2a2a2a', highlightthickness=1,
                                     highlightbackground='#4a4a4a')
        self.image_canvas.pack(padx=5, pady=5)
        
        # Etiqueta de estado de imagen
        self.image_status_label = tk.Label(self.image_frame, 
                                          text="No hay imagen disponible",
                                          bg='#1a1a1a', fg='#aaaaaa', 
                                          font=('Arial', 9))
        self.image_status_label.pack(pady=(0, 5))
        
        # Inicialmente ocultar el frame de imagen
        self.image_frame.pack_forget()
        self.current_image = None
        
        # Frame de acciones
        action_frame = tk.Frame(left_frame, bg='#1a1a1a')
        action_frame.pack(fill=tk.X, pady=(10, 0))
        
        # Entrada de texto
        self.input_var = tk.StringVar()
        self.input_entry = tk.Entry(action_frame, textvariable=self.input_var,
                                   bg='#2a2a2a', fg='white', insertbackground='white',
                                   font=('Arial', 12), relief=tk.FLAT)
        self.input_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.input_entry.bind('<Return>', lambda e: self.process_input())
        
        self.send_button = tk.Button(action_frame, text="‚û§ Enviar", 
                                    command=self.process_input,
                                    bg='#4a9eff', fg='white', font=('Arial', 11, 'bold'),
                                    activebackground='#5aAeff', relief=tk.FLAT,
                                    padx=15)
        self.send_button.pack(side=tk.LEFT, padx=(5, 0))
        
        # Botones de acci√≥n r√°pida
        self.create_quick_actions(left_frame)
    
    def create_quick_actions(self, parent):
        """Crea los botones de acci√≥n r√°pida"""
        quick_actions_frame = tk.Frame(parent, bg='#1a1a1a')
        quick_actions_frame.pack(fill=tk.X, pady=(10, 0))
        
        self.attack_button = tk.Button(quick_actions_frame, text="‚öîÔ∏è Atacar",
                                      command=self.quick_attack,
                                      bg='#8B0000', fg='white', font=('Arial', 10, 'bold'),
                                      activebackground='#AA0000', relief=tk.FLAT,
                                      state=tk.DISABLED, padx=15, pady=5)
        self.attack_button.pack(side=tk.LEFT, padx=2)
        
        self.defend_button = tk.Button(quick_actions_frame, text="üõ°Ô∏è Defender",
                                      command=self.quick_defend,
                                      bg='#00008B', fg='white', font=('Arial', 10, 'bold'),
                                      activebackground='#0000AA', relief=tk.FLAT,
                                      state=tk.DISABLED, padx=15, pady=5)
        self.defend_button.pack(side=tk.LEFT, padx=2)
        
        self.perception_button = tk.Button(quick_actions_frame, text="üëÅÔ∏è Percepci√≥n",
                                         command=self.roll_perception,
                                         bg='#4a4a4a', fg='white', font=('Arial', 10, 'bold'),
                                         activebackground='#5a5a5a', relief=tk.FLAT,
                                         padx=15, pady=5)
        self.perception_button.pack(side=tk.LEFT, padx=2)
        
        self.rest_button = tk.Button(quick_actions_frame, text="üèïÔ∏è Descansar",
                                    command=self.rest,
                                    bg='#2a6a2a', fg='white', font=('Arial', 10, 'bold'),
                                    activebackground='#3a7a3a', relief=tk.FLAT,
                                    padx=15, pady=5)
        self.rest_button.pack(side=tk.LEFT, padx=2)
    
    def create_character_panel(self, parent):
        """Crea el panel del personaje"""
        right_frame = tk.Frame(parent, bg='#2a2a2a', width=400)
        right_frame.grid(row=0, column=1, sticky='nsew')
        right_frame.grid_propagate(False)
        
        # Canvas con scroll para el panel de personaje
        self.char_canvas = Canvas(right_frame, bg='#2a2a2a', highlightthickness=0)
        char_scrollbar = ttk.Scrollbar(right_frame, orient="vertical", command=self.char_canvas.yview)
        self.char_scrollable_frame = Frame(self.char_canvas, bg='#2a2a2a')
        
        self.char_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.char_canvas.configure(scrollregion=self.char_canvas.bbox("all"))
        )
        
        self.char_canvas.create_window((0, 0), window=self.char_scrollable_frame, anchor="nw")
        self.char_canvas.configure(yscrollcommand=char_scrollbar.set)
        
        # Crear contenido del panel
        self.setup_character_panel()
        
        # Empaquetar canvas y scrollbar
        self.char_canvas.pack(side="left", fill="both", expand=True)
        char_scrollbar.pack(side="right", fill="y")
    
    def setup_character_panel(self):
        """Configura el panel de informaci√≥n del personaje"""
        # T√≠tulo del personaje
        char_frame = tk.LabelFrame(self.char_scrollable_frame, text="üë§ Personaje",
                                  bg='#2a2a2a', fg='white',
                                  font=('Arial', 14, 'bold'))
        char_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Informaci√≥n b√°sica
        self.char_info_frame = tk.Frame(char_frame, bg='#2a2a2a')
        self.char_info_frame.pack(fill=tk.X, padx=10, pady=(10, 0))
        
        # Stats con barras
        self.create_stats_panel(char_frame)
        
        # Atributos
        self.create_attributes_panel(char_frame)
        
        # Combat stats
        self.create_combat_panel(char_frame)
        
        # Estad√≠sticas generales
        self.create_general_stats_panel(char_frame)
    
    def create_stats_panel(self, parent):
        """Crea el panel de estad√≠sticas con barras"""
        stats_frame = tk.LabelFrame(parent, text="üìä Estad√≠sticas",
                                  bg='#2a2a2a', fg='white', font=('Arial', 11, 'bold'))
        stats_frame.pack(fill=tk.X, padx=10, pady=(5, 10))
        
        # HP
        hp_frame = tk.Frame(stats_frame, bg='#2a2a2a')
        hp_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.hp_label = tk.Label(hp_frame, text="‚ù§Ô∏è HP: 100/100",
                                bg='#2a2a2a', fg='white', font=('Arial', 10))
        self.hp_label.pack(anchor=tk.W)
        
        self.hp_var = tk.DoubleVar(value=100)
        self.hp_bar = ttk.Progressbar(hp_frame, variable=self.hp_var,
                                     maximum=100, length=280,
                                     style='HP.Horizontal.TProgressbar')
        self.hp_bar.pack(fill=tk.X, pady=(2, 0))
        
        # Man√°
        mana_frame = tk.Frame(stats_frame, bg='#2a2a2a')
        mana_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.mana_label = tk.Label(mana_frame, text="üíô Man√°: 10/10",
                                  bg='#2a2a2a', fg='white', font=('Arial', 10))
        self.mana_label.pack(anchor=tk.W)
        
        self.mana_var = tk.DoubleVar(value=100)
        self.mana_bar = ttk.Progressbar(mana_frame, variable=self.mana_var,
                                       maximum=100, length=280,
                                       style='Mana.Horizontal.TProgressbar')
        self.mana_bar.pack(fill=tk.X, pady=(2, 0))
        
        # Experiencia
        exp_frame = tk.Frame(stats_frame, bg='#2a2a2a')
        exp_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.exp_label = tk.Label(exp_frame, text="‚≠ê EXP: 0/100",
                                 bg='#2a2a2a', fg='white', font=('Arial', 10))
        self.exp_label.pack(anchor=tk.W)
        
        self.exp_var = tk.DoubleVar(value=0)
        self.exp_bar = ttk.Progressbar(exp_frame, variable=self.exp_var,
                                      maximum=100, length=280,
                                      style='EXP.Horizontal.TProgressbar')
        self.exp_bar.pack(fill=tk.X, pady=(2, 0))
        
        # Oro
        self.gold_label = tk.Label(stats_frame, text="üí∞ Oro: 50",
                                  bg='#2a2a2a', fg='#FFD700', font=('Arial', 10, 'bold'))
        self.gold_label.pack(anchor=tk.W, padx=5, pady=(5, 10))
    
    def create_attributes_panel(self, parent):
        """Crea el panel de atributos"""
        self.attr_frame = tk.LabelFrame(parent, text="üí™ Atributos",
                                       bg='#2a2a2a', fg='white', font=('Arial', 11, 'bold'))
        self.attr_frame.pack(fill=tk.X, padx=10, pady=(5, 10))
    
    def create_combat_panel(self, parent):
        """Crea el panel de estad√≠sticas de combate"""
        self.combat_frame = tk.LabelFrame(parent, text="‚öîÔ∏è Combate",
                                         bg='#2a2a2a', fg='white', font=('Arial', 11, 'bold'))
        self.combat_frame.pack(fill=tk.X, padx=10, pady=(5, 10))
    
    def create_general_stats_panel(self, parent):
        """Crea el panel de estad√≠sticas generales"""
        self.general_stats_frame = tk.LabelFrame(parent, text="üìà Estad√≠sticas",
                                                bg='#2a2a2a', fg='white', font=('Arial', 11, 'bold'))
        self.general_stats_frame.pack(fill=tk.X, padx=10, pady=(5, 10))
    
    def create_menu(self):
        """Crea el men√∫ principal"""
        menubar = tk.Menu(self, bg='#2a2a2a', fg='white')
        self.config(menu=menubar)
        
        # Men√∫ Juego
        game_menu = tk.Menu(menubar, tearoff=0, bg='#2a2a2a', fg='white')
        menubar.add_cascade(label="Juego", menu=game_menu)
        game_menu.add_command(label="Nuevo Personaje", command=self.new_character)
        game_menu.add_command(label="Guardar", command=self.save_game)
        game_menu.add_command(label="Cargar", command=self.load_game)
        game_menu.add_separator()
        game_menu.add_command(label="Salir", command=self.quit)
        
        # Men√∫ Ayuda
        help_menu = tk.Menu(menubar, tearoff=0, bg='#2a2a2a', fg='white')
        menubar.add_cascade(label="Ayuda", menu=help_menu)
        help_menu.add_command(label="Comandos", command=self.show_commands)
        help_menu.add_command(label="Acerca de", command=self.show_about)
    
    def on_game_event(self, event: str, data):
        """Maneja eventos del sistema de juego"""
        if event == "character_set":
            self.update_character_display()
            
        elif event == "character_updated":
            self.update_character_display()
            
        elif event == "combat_started":
            self.enable_combat_ui()
            enemy = data["enemy"]
            self.add_narration(f"\n‚öîÔ∏è ¬°COMBATE! ‚öîÔ∏è", "combat")
            self.add_narration(f"¬°Un {enemy.type} aparece!", "combat")
            self.add_narration(enemy.description, "narration")
            
        elif event == "combat_ended":
            self.disable_combat_ui()
            if data["victory"]:
                self.handle_victory(data["enemy"])
            elif data["fled"]:
                self.add_narration("¬°Has huido del combate!", "combat")
                
        elif event == "level_up":
            self.add_narration(f"\nüéâ ¬°SUBISTE DE NIVEL! Ahora eres nivel {data['new_level']}", "reward")
            
        elif event == "character_died":
            self.handle_character_death()
    
    def start_game(self):
        """Inicia el juego"""
        self.add_narration("=== HABITACI√ìN DEL TIEMPO RPG v0.2.0 ===\n", "title")
        self.add_narration("Bienvenido a la dimensi√≥n de entrenamiento definitiva.\n", "system")
        self.add_narration("Aqu√≠ el tiempo fluye diferente. Un d√≠a aqu√≠ es un a√±o afuera.", "system")
        self.add_narration("Tu objetivo: volverte m√°s fuerte que nunca.\n", "system")
        
        # Crear personaje si no existe
        if not self.game_state.character:
            self.new_character()
    
    def new_character(self):
        """Inicia la creaci√≥n de un nuevo personaje"""
        dialog = CharacterCreationDialog(self)
        self.wait_window(dialog)
        
        if dialog.result:
            # Crear personaje
            character = Character(
                dialog.result["name"],
                dialog.result["race"],
                dialog.result["class"]
            )
            
            # Aplicar atributos personalizados
            for attr, value in dialog.result["attributes"].items():
                setattr(character.attributes, attr, value)
            
            # Establecer en game state
            self.game_state.set_character(character)
            
            # Iniciar proceso narrativo divino
            self.add_narration("\n" + "="*50 + "\n", "system")
            self.in_divine_questioning = True
            
            # Generar escena inicial con preguntas divinas
            divine_narrative = self.ai_gm.start_divine_narrative(character)
            self.add_narration(divine_narrative, "divine")
    
    def process_input(self):
        """Procesa la entrada del jugador"""
        if not self.game_state.character:
            messagebox.showwarning("Advertencia", "Primero debes crear un personaje")
            return
        
        user_input = self.input_var.get().strip()
        if not user_input:
            return
        
        # Mostrar entrada del jugador
        self.add_narration(f"> {user_input}", "player")
        self.input_var.set("")
        
        # Si estamos en el proceso de preguntas divinas
        if self.in_divine_questioning:
            self.handle_divine_response(user_input)
            return
        
        # Si estamos esperando creaci√≥n del mundo
        if self.awaiting_world_creation:
            self.complete_world_creation()
            return
        
        # Si estamos en combate, manejar comandos de combate
        if self.game_state.combat_active:
            if "huir" in user_input.lower():
                self.game_state.end_combat(fled=True)
            else:
                self.add_narration("¬°Est√°s en combate! Usa los botones de acci√≥n o escribe 'huir'", "combat")
            return
        
        # Verificar si la acci√≥n resulta en un encuentro
        enemy_type = self.ai_gm.determine_encounter(user_input)
        if enemy_type:
            enemy = Enemy(enemy_type)
            self.game_state.start_combat(enemy)
        else:
            # Generar narraci√≥n mejorada con posible imagen
            narration, image_path = self.ai_gm.generate_enhanced_narration(user_input, self.game_state.character)
            self.add_narration(narration, "narration")
            
            # Mostrar imagen si est√° disponible
            if image_path:
                self.display_scene_image(image_path)
    
    def quick_attack(self):
        """Ejecuta un ataque r√°pido"""
        if not self.game_state.combat_active:
            return
        
        character = self.game_state.character
        enemy = self.game_state.current_enemy
        
        self.add_narration(f"\n{character.name} ataca al {enemy.type}!", "combat")
        
        result = self.combat_system.player_attack(character, enemy)
        
        self.add_narration(f"Tirada de ataque: {result['attack_desc']}", "dice")
        self.add_narration(f"Defensa enemiga: {result['defense_desc']}", "dice")
        
        if result['damage'] > 0:
            self.add_narration(f"¬°Infliges {result['damage']} puntos de da√±o!", "combat")
        else:
            self.add_narration("¬°El enemigo esquiva tu ataque!", "combat")
        
        if result['enemy_defeated']:
            self.game_state.end_combat(victory=True)
            return
        
        # Contraataque del enemigo
        self.enemy_turn()
    
    def quick_defend(self):
        """Ejecuta una defensa"""
        if not self.game_state.combat_active:
            return
        
        character = self.game_state.character
        enemy = self.game_state.current_enemy
        
        self.add_narration(f"\n{character.name} se prepara para defender...", "combat")
        
        result = self.combat_system.player_defend(character, enemy)
        
        self.add_narration(f"Defensa mejorada: {result['defense_desc']}", "dice")
        
        if result.get('damage_reduced', 0) > 0:
            self.add_narration(f"¬°Tu defensa reduce {result['damage_reduced']} puntos de da√±o!", "system")
        
        self.game_state.update_character()
        
        if character.hp_actual <= 0:
            self.game_state.end_combat()
    
    def enemy_turn(self):
        """Turno del enemigo"""
        if not self.game_state.combat_active:
            return
        
        character = self.game_state.character
        enemy = self.game_state.current_enemy
        
        self.add_narration(f"\n¬°El {enemy.type} ataca!", "combat")
        
        result = self.combat_system.enemy_attack(enemy, character)
        
        self.add_narration(f"Ataque enemigo: {result['attack_desc']}", "dice")
        self.add_narration(f"Tu defensa: {result['defense_desc']}", "dice")
        
        if result['damage'] > 0:
            self.add_narration(f"¬°Recibes {result['damage']} puntos de da√±o!", "combat")
            self.game_state.take_damage(result['damage'])
        else:
            self.add_narration("¬°Esquivas el ataque!", "combat")
        
        if result['player_defeated']:
            self.game_state.end_combat()
    
    def handle_divine_response(self, user_response: str):
        """Maneja las respuestas del jugador a las preguntas divinas"""
        try:
            reaction, is_complete, next_question = self.ai_gm.process_divine_response(user_response)
            
            # Mostrar reacci√≥n divina
            self.add_narration(reaction, "divine")
            
            if is_complete:
                # Preguntas completadas, preparar creaci√≥n del mundo
                self.add_narration("\n*Prepar√°ndose para crear tu mundo personalizado...*", "system")
                self.in_divine_questioning = False
                self.awaiting_world_creation = True
                
                # Mensaje al jugador
                self.add_narration("\n**Presiona Enter para presenciar la creaci√≥n de tu mundo...**", "system")
                
            elif next_question:
                # Mostrar siguiente pregunta
                self.add_narration(f"\n{next_question}", "divine")
                
        except Exception as e:
            self.add_narration(f"*Error en el proceso divino: {str(e)}*", "system")
    
    def complete_world_creation(self):
        """Completa el proceso de creaci√≥n del mundo"""
        try:
            self.awaiting_world_creation = False
            
            # Mostrar mensaje de creaci√≥n
            self.add_narration("\n*El poder divino fluye, moldeando la realidad...*", "system")
            
            # Generar narrativa y imagen del mundo
            world_narrative, world_image_path = self.ai_gm.generate_world_creation(self.game_state.character)
            
            # Mostrar narrativa del mundo creado
            self.add_narration(world_narrative, "world_creation")
            
            # Mostrar imagen del mundo si est√° disponible
            if world_image_path:
                self.display_scene_image(world_image_path)
                self.add_narration("\n*Una imagen del mundo creado aparece ante tus ojos*", "system")
            
            # El juego ahora est√° en modo normal
            self.add_narration("\n**Tu aventura ha comenzado. ¬øQu√© har√°s?**", "system")
            
        except Exception as e:
            self.add_narration(f"*Error creando el mundo: {str(e)}*", "system")
    
    def display_scene_image(self, image_path: str):
        """Muestra una imagen de escenario en la interfaz"""
        try:
            # Cargar imagen usando el generador de im√°genes
            tk_image = self.ai_gm.image_generator.load_image_for_display(image_path)
            
            if tk_image:
                # Mostrar el frame de imagen si estaba oculto
                self.image_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))
                
                # Limpiar canvas anterior
                self.image_canvas.delete("all")
                
                # Mostrar nueva imagen
                self.image_canvas.create_image(200, 150, image=tk_image, anchor=tk.CENTER)
                
                # Guardar referencia para evitar garbage collection
                self.current_image = tk_image
                
                # Actualizar etiqueta de estado
                self.image_status_label.config(text="Escenario actual", fg='#00FF00')
                
            else:
                self.image_status_label.config(text="Error cargando imagen", fg='#FF6666')
                
        except Exception as e:
            print(f"Error mostrando imagen: {e}")
            self.image_status_label.config(text="Error mostrando imagen", fg='#FF6666')
    
    def hide_scene_image(self):
        """Oculta el √°rea de imagen"""
        self.image_frame.pack_forget()
        self.current_image = None
    
    def roll_perception(self):
        """Realiza una tirada de percepci√≥n"""
        if not self.game_state.character:
            return
        
        if self.game_state.combat_active:
            self.add_narration("¬°No puedes hacer eso en combate!", "system")
            return
        
        character = self.game_state.character
        bonus = character.get_attribute_bonus('sabiduria')
        roll, desc = self.dice_system.roll_d100_with_bonus(bonus)
        
        self.add_narration(f"\nTirada de Percepci√≥n: {desc}", "dice")
        
        # Determinar resultado
        if roll >= 90:
            self.add_narration("¬°√âxito cr√≠tico! Percibes cada detalle del entorno.", "system")
            self.add_narration("Notas una anomal√≠a en el espacio... parece un portal a otra zona.", "narration")
        elif roll >= 70:
            self.add_narration("√âxito. Detectas movimiento en la distancia.", "system")
            self.add_narration("Parece que hay criaturas merodeando por aqu√≠.", "narration")
        elif roll >= 50:
            self.add_narration("√âxito parcial. Percibes lo b√°sico del entorno.", "system")
        else:
            self.add_narration("Fallo. No notas nada fuera de lo com√∫n.", "system")
    
    def rest(self):
        """Permite al personaje descansar"""
        if not self.game_state.character:
            return
        
        if self.game_state.combat_active:
            self.add_narration("¬°No puedes descansar en combate!", "system")
            return
        
        character = self.game_state.character
        
        self.add_narration("\nüèïÔ∏è Te tomas un momento para descansar...", "system")
        
        # Recuperar HP y Man√°
        hp_recovered = int(character.hp_max * 0.3)
        mana_recovered = int(character.mana_max * 0.5)
        
        character.heal(hp_recovered)
        character.restore_mana(mana_recovered)
        
        self.add_narration(f"Recuperas {hp_recovered} puntos de vida.", "system")
        self.add_narration(f"Recuperas {mana_recovered} puntos de man√°.", "system")
        
        self.game_state.update_character()
    
    def enable_combat_ui(self):
        """Habilita la interfaz de combate"""
        self.attack_button.config(state=tk.NORMAL)
        self.defend_button.config(state=tk.NORMAL)
        self.rest_button.config(state=tk.DISABLED)
    
    def disable_combat_ui(self):
        """Deshabilita la interfaz de combate"""
        self.attack_button.config(state=tk.DISABLED)
        self.defend_button.config(state=tk.DISABLED)
        self.rest_button.config(state=tk.NORMAL)
    
    def handle_victory(self, enemy: Enemy):
        """Maneja la victoria en combate"""
        self.add_narration(f"\n¬°VICTORIA! Has derrotado al {enemy.type}.", "combat")
        
        # Calcular recompensas
        gold = enemy.get_reward_gold()
        exp = enemy.exp_reward
        
        self.add_narration(f"\nüéâ Recompensas:", "reward")
        self.add_narration(f"   +{exp} puntos de experiencia", "reward")
        self.add_narration(f"   +{gold} monedas de oro", "reward")
        
        # Aplicar recompensas
        self.game_state.add_gold(gold)
        self.game_state.add_experience(exp)
        
        if self.game_state.character:
            self.game_state.character.kills += 1
            self.game_state.update_character()
    
    def handle_character_death(self):
        """Maneja la muerte del personaje"""
        self.add_narration("\nüíÄ HAS MUERTO üíÄ", "combat")
        self.add_narration("Tu entrenamiento termina aqu√≠... por ahora.", "system")
        
        character = self.game_state.character
        if character:
            character.hp_actual = int(character.hp_max * 0.5)
            self.add_narration("\nLa Habitaci√≥n del Tiempo te revive con la mitad de tu vitalidad.", "system")
            self.add_narration("Aprende de tus errores y hazte m√°s fuerte.", "system")
            self.game_state.update_character()
    
    def update_character_display(self):
        """Actualiza la informaci√≥n del personaje en la UI"""
        character = self.game_state.character
        if not character:
            return
        
        # Limpiar frames de informaci√≥n
        for widget in self.char_info_frame.winfo_children():
            widget.destroy()
        for widget in self.attr_frame.winfo_children():
            widget.destroy()
        for widget in self.combat_frame.winfo_children():
            widget.destroy()
        for widget in self.general_stats_frame.winfo_children():
            widget.destroy()
        
        # Informaci√≥n b√°sica
        info_data = [
            ("Nombre:", character.name, '#FFD700'),
            ("Raza:", character.race, 'white'),
            ("Clase:", character.char_class, 'white'),
            ("Nivel:", str(character.level), '#00FF00')
        ]
        
        for i, (label, value, color) in enumerate(info_data):
            row_frame = tk.Frame(self.char_info_frame, bg='#2a2a2a')
            row_frame.pack(fill=tk.X, pady=1)
            
            tk.Label(row_frame, text=label, bg='#2a2a2a', fg='gray',
                    font=('Arial', 9), width=8, anchor=tk.W).pack(side=tk.LEFT)
            tk.Label(row_frame, text=value, bg='#2a2a2a', fg=color,
                    font=('Arial', 10, 'bold')).pack(side=tk.LEFT)
        
        # Actualizar barras de progreso
        hp_percent = (character.hp_actual / character.hp_max) * 100
        self.hp_var.set(hp_percent)
        self.hp_label.config(text=f"‚ù§Ô∏è HP: {character.hp_actual}/{character.hp_max}")
        
        mana_percent = (character.mana_actual / character.mana_max) * 100
        self.mana_var.set(mana_percent)
        self.mana_label.config(text=f"üíô Man√°: {character.mana_actual}/{character.mana_max}")
        
        exp_percent = (character.experience / character.exp_to_next) * 100
        self.exp_var.set(exp_percent)
        self.exp_label.config(text=f"‚≠ê EXP: {character.experience}/{character.exp_to_next}")
        
        self.gold_label.config(text=f"üí∞ Oro: {character.gold}")
        
        # Atributos
        attrs = character.attributes
        attr_data = [
            ("FUE", attrs.fuerza, character.get_attribute_bonus('fuerza')),
            ("DES", attrs.destreza, character.get_attribute_bonus('destreza')),
            ("CON", attrs.constitucion, character.get_attribute_bonus('constitucion')),
            ("INT", attrs.inteligencia, character.get_attribute_bonus('inteligencia')),
            ("SAB", attrs.sabiduria, character.get_attribute_bonus('sabiduria')),
            ("CAR", attrs.carisma, character.get_attribute_bonus('carisma'))
        ]
        
        attr_grid = tk.Frame(self.attr_frame, bg='#2a2a2a')
        attr_grid.pack(padx=10, pady=5)
        
        for i, (name, value, bonus) in enumerate(attr_data):
            row = i // 2
            col = (i % 2) * 3
            
            tk.Label(attr_grid, text=f"{name}:", bg='#2a2a2a', fg='gray',
                    font=('Arial', 9)).grid(row=row, column=col, sticky=tk.W, padx=(0, 5))
            tk.Label(attr_grid, text=str(value), bg='#2a2a2a', fg='white',
                    font=('Arial', 10, 'bold')).grid(row=row, column=col+1, padx=(0, 5))
            bonus_text = f"(+{bonus})" if bonus > 0 else ""
            tk.Label(attr_grid, text=bonus_text, bg='#2a2a2a', fg='#00FF00',
                    font=('Arial', 9)).grid(row=row, column=col+2, padx=(0, 10))
        
        # Stats de combate
        combat_stats = [
            ("Ataque:", character.get_attack_dice()),
            ("Defensa:", character.get_defense_dice()),
            ("Fortaleza:", f"+{character.stats.fortaleza}"),
            ("Resistencia:", f"+{character.stats.resistencia}")
        ]
        
        for label, value in combat_stats:
            stat_frame = tk.Frame(self.combat_frame, bg='#2a2a2a')
            stat_frame.pack(fill=tk.X, pady=1)
            
            tk.Label(stat_frame, text=label, bg='#2a2a2a', fg='gray',
                    font=('Arial', 9), width=12, anchor=tk.W).pack(side=tk.LEFT)
            tk.Label(stat_frame, text=value, bg='#2a2a2a', fg='white',
                    font=('Arial', 9, 'bold')).pack(side=tk.LEFT)
        
        # Estad√≠sticas generales
        stats_text = f"Enemigos derrotados: {character.kills}\n"
        stats_text += f"Muertes: {character.deaths}"
        
        tk.Label(self.general_stats_frame, text=stats_text, bg='#2a2a2a', fg='white',
                justify=tk.LEFT, font=('Arial', 9)).pack(anchor=tk.W, padx=10, pady=5)
    
    def add_narration(self, text: str, tag: str = "normal"):
        """Agrega texto al √°rea de narraci√≥n"""
        self.narration_text.insert(tk.END, text + "\n")
        
        # Aplicar formato seg√∫n el tag
        start_index = f"end-{len(text)+1}c"
        end_index = "end-1c"
        
        if tag == "title":
            self.narration_text.tag_add("title", start_index, end_index)
            self.narration_text.tag_config("title", foreground="#FFD700", 
                                         font=('Arial', 14, 'bold'))
        elif tag == "system":
            self.narration_text.tag_add("system", start_index, end_index)
            self.narration_text.tag_config("system", foreground="#00CED1")
        elif tag == "combat":
            self.narration_text.tag_add("combat", start_index, end_index)
            self.narration_text.tag_config("combat", foreground="#FF6347")
        elif tag == "dice":
            self.narration_text.tag_add("dice", start_index, end_index)
            self.narration_text.tag_config("dice", foreground="#32CD32")
        elif tag == "reward":
            self.narration_text.tag_add("reward", start_index, end_index)
            self.narration_text.tag_config("reward", foreground="#FFD700")
        elif tag == "divine":
            self.narration_text.tag_add("divine", start_index, end_index)
            self.narration_text.tag_config("divine", foreground="#9932CC", 
                                         font=('Arial', 12, 'bold'))
        elif tag == "player":
            self.narration_text.tag_add("player", start_index, end_index)
            self.narration_text.tag_config("player", foreground="#87CEEB",
                                         font=('Arial', 11, 'italic'))
        elif tag == "world_creation":
            self.narration_text.tag_add("world_creation", start_index, end_index)
            self.narration_text.tag_config("world_creation", foreground="#FF1493",
                                         font=('Arial', 12, 'bold'))
        
        # Auto-scroll
        self.narration_text.see(tk.END)
    
    def save_game(self):
        """Guarda el estado del juego"""
        if not self.game_state.character:
            messagebox.showwarning("Advertencia", "No hay personaje para guardar")
            return
        
        try:
            filename = self.save_manager.save_game(self.game_state, self.ai_gm, self.narrative_manager)
            self.add_narration(f"\nüíæ Juego guardado como: {filename}", "system")
        except Exception as e:
            messagebox.showerror("Error", f"Error al guardar: {str(e)}")
    
    def load_game(self):
        """Carga un juego guardado"""
        try:
            game_data = self.save_manager.load_game()
            if game_data:
                # Restaurar estado del juego
                self.game_state = game_data["game_state"]
                self.ai_gm = game_data["ai_gm"]
                self.narrative_manager = game_data["narrative_manager"]
                
                # Reconectar observadores
                self.game_state.subscribe(self.on_game_event)
                
                self.add_narration(f"\nüíæ Partida cargada: {self.game_state.character.name} - Nivel {self.game_state.character.level}", "system")
                self.update_character_display()
        except Exception as e:
            messagebox.showerror("Error", f"Error al cargar: {str(e)}")
    
    def show_commands(self):
        """Muestra los comandos disponibles"""
        commands = """
COMANDOS Y ACCIONES:

üó∫Ô∏è Exploraci√≥n:
- Escribe cualquier acci√≥n para interactuar con el mundo
- Usa el bot√≥n Percepci√≥n para examinar el entorno
- Palabras clave: buscar, explorar, investigar, entrenar

‚öîÔ∏è Combate:
- Bot√≥n Atacar: Realiza un ataque b√°sico
- Bot√≥n Defender: Reduce el da√±o del pr√≥ximo ataque
- Escribe 'huir' para escapar del combate

üèïÔ∏è General:
- Bot√≥n Descansar: Recupera HP y Man√° (no disponible en combate)
- Las tiradas de dados son autom√°ticas
- Tu personaje sube de nivel con la experiencia

üí° Consejos:
- La Habitaci√≥n del Tiempo tiene zonas infinitas por explorar
- Cada enemigo derrotado te hace m√°s fuerte
- Si mueres, revives con la mitad de HP
- Guarda tu progreso frecuentemente
"""
        messagebox.showinfo("Comandos", commands)
    
    def show_about(self):
        """Muestra informaci√≥n sobre el juego"""
        about = """
Habitaci√≥n del Tiempo RPG v0.2.0

Un juego de rol con IA donde entrenas
en una dimensi√≥n especial para volverte
m√°s fuerte que nunca.

El tiempo aqu√≠ fluye diferente...
Un d√≠a dentro es un a√±o afuera.

¬øHasta d√≥nde llegar√°s?

Arquitectura modular refactorizada
Creado con Python, Tkinter y OpenAI GPT-4
"""
        messagebox.showinfo("Acerca de", about)